{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","handleInstantiateFibonacchi","_callee","event","fetchPromise","_ref2","instance","result","regenerator_default","a","wrap","_context","prev","next","preventDefault","fetch","WebAssembly","instantiateStreaming","sent","exports","fibonacci","console","log","stop","handleInstantiateTdlib","_callee2","t0","_context2","performance","now","compileStreaming","generateBigWasm","_callee3","_context3","react_default","createElement","className","src","logo","alt","onClick","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","__webpack_require__","p"],"mappings":"qSA8EeA,0NAvEXC,kEAA8B,SAAAC,EAAMC,GAAN,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAC1BV,EAAMW,iBAEAV,EAAeW,MAAM,kBAHDJ,EAAAE,KAAA,EAICG,YAAYC,qBAAqBb,GAJlC,OAAAC,EAAAM,EAAAO,KAIlBZ,EAJkBD,EAIlBC,SACFC,EAASD,EAASa,QAAQC,UAAU,IAC1CC,QAAQC,IAAIf,GANc,wBAAAI,EAAAY,SAAArB,8DAS9BsB,6DAAyB,SAAAC,EAAMtB,GAAN,IAAAuB,EAAAtB,EAAA,OAAAI,EAAAC,EAAAC,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,cACrBV,EAAMW,iBAEAY,EAAKE,YAAYC,MACjBzB,EAAeW,MAAM,yCAJNY,EAAAd,KAAA,EAKAG,YAAYc,iBAAiB1B,GAL7B,OAAAuB,EAAAT,KAMrBG,QAAQC,IAAI,iCAAmCM,YAAYC,MAAQH,IAN9C,wBAAAC,EAAAJ,SAAAE,8DAwBzBM,sDAAkB,SAAAC,EAAM7B,GAAN,OAAAK,EAAAC,EAAAC,KAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,wBAAAoB,EAAAV,SAAAS,oIAuBd,OACIE,EAAAzB,EAAA0B,cAAA,OAAKC,UAAU,OACXF,EAAAzB,EAAA0B,cAAA,UAAQC,UAAU,cACdF,EAAAzB,EAAA0B,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCL,EAAAzB,EAAA0B,cAAA,iBACSD,EAAAzB,EAAA0B,cAAA,0BADT,wBAGAD,EAAAzB,EAAA0B,cAAA,UAAQK,QAASC,KAAKjB,wBAAtB,qBACAU,EAAAzB,EAAA0B,cAAA,UAAQK,QAASC,KAAKxC,6BAAtB,4BAlEFyC,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAzB,EAAA0B,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAzC,QAAiB0C,EAAAC,EAAuB","file":"static/js/main.f2165a1c.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport TdClient from 'tdweb/dist/tdweb';\nimport './App.css';\n\nclass App extends React.Component{\n\n    handleInstantiateFibonacchi = async event => {\n        event.preventDefault();\n\n        const fetchPromise = fetch('fibonacci.wasm');\n        const { instance } = await WebAssembly.instantiateStreaming(fetchPromise);\n        const result = instance.exports.fibonacci(42);\n        console.log(result);\n    };\n\n    handleInstantiateTdlib = async event => {\n        event.preventDefault();\n\n        const t0 = performance.now();\n        const fetchPromise = fetch('ef5b7375afcb3e32ba4066a0003c699c.wasm');\n        const module = await WebAssembly.compileStreaming(fetchPromise);\n        console.log('compileStreaming finish time=' + (performance.now() - t0));\n\n        // let options = {\n        //     logVerbosityLevel: 1,\n        //     jsLogVerbosityLevel: 3,\n        //     mode: 'wasm',\n        //     prefix: 'tdlib',\n        //     readOnly: false,\n        //     isBackground: false,\n        //     useDatabase: false\n        // };\n        //\n        // this.client = new TdClient(options);\n        // this.client.onUpdate = update => {\n        //\n        // };\n    };\n\n    generateBigWasm = async event => {\n        // event.preventDefault();\n\n//         let str = '';\n//         for (let i = 0; i < 1000; i++) {\n//             str += `\n//\n// WASM_EXPORT\n// int fibonacci${i}(int n) {\n//   int i, t, a = 0, b = 1;\n//   for (i = 0; i < n; i++) {\n//     t = a + b;\n//     a = b;\n//     b = t;\n//   }\n//   return b;\n// }`;\n//         }\n//         console.log(str);\n    };\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <p>\n                        Edit <code>src/App.js</code> and save to reload.\n                    </p>\n                    <button onClick={this.handleInstantiateTdlib}>instantiate tdlib</button>\n                    <button onClick={this.handleInstantiateFibonacchi}>instantiate fib</button>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}